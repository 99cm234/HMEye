@using System.ComponentModel.DataAnnotations
@inject UserService UserService

<MudDialog @bind-Visible="Visible" Options="Options" Style="min-width: 350px" Class="bordered-dialog">
    <TitleContent>
        <MudText Typo="Typo.h6">Reset Password for @Model.Username</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm EditContext="EditContext" OnValidSubmit="OnValidSubmit" FormName="reset-password">
            <DataAnnotationsValidator />
            @if (EditContext.GetValidationMessages().Any())
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">
                    <ValidationSummary />
                </MudAlert>
            }
            @if (Errors.Any())
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">
                    @foreach (var error in Errors)
                    {
                        <MudText>@error</MudText>
                    }
                </MudAlert>
            }
            <MudTextField @bind-Value="Model.NewPassword" Label="New Password" Variant="Variant.Outlined" InputType="InputType.Password" />
            <MudTextField @bind-Value="Model.ConfirmPassword" Label="Confirm Password" Variant="Variant.Outlined" InputType="InputType.Password" For="@(() => Model.ConfirmPassword)" />
            <MudStack Row Class="mt-4 mb-4">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth>Reset</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnCancel" FullWidth>Cancel</MudButton>
            </MudStack>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public DialogOptions Options { get; set; } = new();
    [Parameter] public ResetPasswordModel Model { get; set; } = new();
    [Parameter] public EditContext EditContext { get; set; } = null!;
    [Parameter] public List<string> Errors { get; set; } = new();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    public class ResetPasswordModel
    {
        public string Username { get; set; } = string.Empty;
        [Required, MinLength(6)] public string NewPassword { get; set; } = string.Empty;
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}